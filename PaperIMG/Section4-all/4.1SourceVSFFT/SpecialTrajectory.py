# -*- coding:utf-8 -*-
# Created by steve @ 17-12-23 下午3:21
'''
                   _ooOoo_ 
                  o8888888o 
                  88" . "88 
                  (| -_- |) 
                  O\  =  /O 
               ____/`---'\____ 
             .'  \\|     |//  `. 
            /  \\|||  :  |||//  \ 
           /  _||||| -:- |||||-  \ 
           |   | \\\  -  /// |   | 
           | \_|  ''\---/''  |   | 
           \  .-\__  `-`  ___/-. / 
         ___`. .'  /--.--\  `. . __ 
      ."" '<  `.___\_<|>_/___.'  >'"". 
     | | :  `- \`.;`\ _ /`;.`/ - ` : | | 
     \  \ `-.   \_ __\ /__ _/   .-` /  / 
======`-.____`-.___\_____/___.-`____.-'====== 
                   `=---=' 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
         佛祖保佑       永无BUG 
'''

import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
from scipy.spatial.distance import pdist, squareform

import os


class AUCBuilder(object):
    def __init__(self, dir_name):
        '''
        load data, according to a dir_name
        :param dir_name:
        '''
        if not dir_name[-1] is '/':
            dir_name = dir_name + '/'
        for file_name in os.listdir(dir_name):
            if 'bi_mat' in file_name:
                self.bi_mat = np.loadtxt(dir_name + file_name)

            if 'mnza_mat' in file_name:
                self.mnza_mat = np.loadtxt(dir_name + file_name)

            if 'pairs_mat' in file_name:
                self.pairs_mat = np.loadtxt(dir_name + file_name)

            if 'result_mat' in file_name:
                self.result_mat = np.loadtxt(dir_name + file_name)

            if 'source_distance_mat' in file_name:
                self.src_mat = np.loadtxt(dir_name + file_name)
                self.src_mat[:, :15] = np.max(self.src_mat)
                self.src_mat[:15, :] = np.max(self.src_mat)

            if 'pair.txt' in file_name:
                self.pair_map = np.loadtxt(dir_name + file_name, delimiter=',')

            if 'test' in file_name:
                self.trace_path = np.loadtxt(dir_name + file_name, delimiter=',')

    def ComputeReferenceMat(self, distance_threshold: float = 1.6, is_show: bool = True):
        '''
        Compute reference matrix according to the trajectory generated by graph optimization
        :param distance_threshold:
        :param is_show:
        :return:
        '''

        assert (self.mnza_mat.shape == self.src_mat.shape)
        self.ref_mat = np.zeros_like(self.mnza_mat)

        # for i in range(self.ref_mat.shape[0]):
        #     for j in range(self.ref_mat.shape[1]):
        self.ref_mat = squareform(pdist(self.trace_path[:, :2]))
        assert (self.mnza_mat.shape == self.ref_mat.shape)

        if is_show:
            plt.figure()
            plt.title('ref before threshold')
            plt.imshow(self.ref_mat)
            plt.colorbar()

        self.ref_mat = np.vectorize(lambda x: 1.0 if x < distance_threshold else 0.0)(self.ref_mat)

        if is_show:
            plt.figure()
            plt.title('ref bi')
            plt.imshow(self.ref_mat)

    def ComputeAUC(self, interval_num: int = 10000, is_show: bool = True):

    def display_loaded_file(self, is_show=True):
        '''
        display resource data from __init__
        :param is_show: whether run plt.show() at the end of this function.
        :return:
        '''
        plt.figure()
        plt.imshow(self.mnza_mat)
        plt.title('mnza_mat')

        plt.figure()
        plt.imshow(self.src_mat)
        plt.title('src_mat')

        plt.figure()
        plt.plot(self.trace_path[:, 0], self.trace_path[:, 1])
        plt.grid()

        if is_show:
            plt.show()


if __name__ == '__main__':
    auc_b = AUCBuilder('./33')

    auc_b.ComputeReferenceMat()

    auc_b.display_loaded_file()
